#include <stdio.h>
#include <stdlib.h>

struct Edge {
    int src, dest, weight;
};

int compareEdges(const void* a, const void* b) {
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}

int findParent(int parent[], int i) {
    if (parent[i] == -1)
        return i;
    return findParent(parent, parent[i]);
}


void unionSets(int parent[], int x, int y) {
    int xset = findParent(parent, x);
    int yset = findParent(parent, y);
    parent[xset] = yset;
}


void kruskalMST(struct Edge edges[], int V, int E) {
    qsort(edges, E, sizeof(edges[0]), compareEdges);
    struct Edge result[V];
    int parent[V];
    for (int i = 0; i < V; i++)
        parent[i] = -1;
    int e = 0, i = 0;
    while (e < V - 1 && i < E) {
        struct Edge nextEdge = edges[i++];
        int x = findParent(parent, nextEdge.src);
        int y = findParent(parent, nextEdge.dest);
        if (x != y) {
            result[e++] = nextEdge;
            unionSets(parent, x, y);
        }
    }
    printf("Edges in the Minimum Spanning Tree:\n");
    for (i = 0; i < e; i++)
        printf("%d -- %d\n", result[i].src, result[i].dest);
}


int main() {
    int V = 4; // Number of vertices
    int E = 5; // Number of edges
    struct Edge edges[] = { {0, 1, 10}, {0, 2, 6}, {0, 3, 5}, {1, 3, 15}, {2, 3, 4} };
    kruskalMST(edges, V, E);
    return 0;
}
