#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct Queue {
    int items[MAX];
    int front;
    int rear;
} Queue;

void initialize(Queue* q) {
    q->front = -1;
    q->rear = -1;
}

int is_empty(Queue* q) {
    return q->front == -1;
}

int is_full(Queue* q) {
    return q->rear == MAX - 1;
}

void enqueue(Queue* q, int item) {
    if (is_full(q)) {
        printf("Queue overflow\n");
        return;
    }
    if (is_empty(q)) {
        q->front = 0;
    }
    q->items[++(q->rear)] = item;
}

int dequeue(Queue* q) {
    if (is_empty(q)) {
        printf("Queue underflow\n");
        exit(EXIT_FAILURE);
    }
    int item = q->items[q->front];
    if (q->front == q->rear) {
        // Reset queue to empty state
        q->front = q->rear = -1;
    } else {
        q->front++;
    }
    return item;
}

int peek(Queue* q) {
    if (is_empty(q)) {
        printf("Queue is empty\n");
        exit(EXIT_FAILURE);
    }
    return q->items[q->front];
}

int size(Queue* q) {
    if (is_empty(q)) {
        return 0;
    }
    return q->rear - q->front + 1;
}

int main() {
    Queue queue;
    initialize(&queue);

    enqueue(&queue, 1);
    enqueue(&queue, 2);
    enqueue(&queue, 3);

    printf("Peek: %d\n", peek(&queue)); 
    printf("Dequeue: %d\n", dequeue(&queue));
    printf("Peek after dequeue: %d\n", peek(&queue));
    printf("Is queue empty? %s\n", is_empty(&queue) ? "Yes" : "No"); 
    printf("Queue size: %d\n", size(&queue));
    return 0;
}
