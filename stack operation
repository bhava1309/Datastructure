#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct Stack {
    int items[MAX];
    int top;
} Stack;

void initialize(Stack* s) {
    s->top = -1;
}

int is_empty(Stack* s) {
    return s->top == -1;
}

int is_full(Stack* s) {
    return s->top == MAX - 1;
}

void push(Stack* s, int item) {
    if (is_full(s)) {
        printf("Stack overflow\n");
        return;
    }
    s->items[++(s->top)] = item;
}

int pop(Stack* s) {
    if (is_empty(s)) {
        printf("Stack underflow\n");
        exit(EXIT_FAILURE);
    }
    return s->items[(s->top)--];
}

int peek(Stack* s) {
    if (is_empty(s)) {
        printf("Stack is empty\n");
        exit(EXIT_FAILURE);
    }
    return s->items[s->top];
}

int size(Stack* s) {
    return s->top + 1;
}

int main() {
    Stack stack;
    initialize(&stack);

    push(&stack, 1);
    push(&stack, 2);
    push(&stack, 3);

    printf("Peek: %d\n", peek(&stack)); 
    printf("Pop: %d\n", pop(&stack));   
    printf("Peek after pop: %d\n", peek(&stack)); 
    printf("Is stack empty? %s\n", is_empty(&stack) ? "Yes" : "No");
    printf("Stack size: %d\n", size(&stack)); // Output: Stack size: 2

    return 0;
}
